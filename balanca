#include <ArduinoJson.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <HX711.h>

const int PINO_DT = 27;
const int PINO_SCK = 26;
const int LED_PIN = 34;

const int TEMPO_ESPERA = 3000;
float fator_calibracao = -83000;

HX711 escala;

const char* ssid = "xxx";
const char* password = "xxx";
const char* tagoToken = "xxx";

void setup() {
  Serial.begin(115200);
  delay(2000);

  Serial.println("=== C√©lula de carga - Calibra√ß√£o de Peso via HTTP ===");

  WiFi.begin(ssid, password);
  Serial.print("Conectando ao Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi conectado!");
  Serial.print("IP: "); Serial.println(WiFi.localIP());

  escala.begin(PINO_DT, PINO_SCK);
  if (!escala.is_ready()) {
    Serial.println("HX711 n√£o est√° pronto! Verifique as conex√µes.");
  }

  float media_leitura = escala.read_average();
  Serial.print("M√©dia de leituras sem carga: ");
  Serial.println(media_leitura, 2);

  escala.tare();
  Serial.println("Balan√ßa zerada.");
}

void loop() {
  escala.set_scale(fator_calibracao);

  if (escala.is_ready()) {
    float peso = escala.get_units();
    Serial.print("Leitura: ");
    Serial.print(peso, 2);
    Serial.println(" kg");

    buscarDados();
    enviarPesoHTTP(peso);
  } else {
    Serial.println("HX711 ocupado ou desconectado!");
  }

  delay(TEMPO_ESPERA);
}

void enviarPesoHTTP(float peso) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ö†Ô∏è Wi-Fi n√£o conectado!");
    return;
  }

  HTTPClient http;
  http.begin("https://api.tago.io/data"); // Endpoint TagoIO
  http.addHeader("Content-Type", "application/json");
  http.addHeader("Device-Token", tagoToken);

  // Monta JSON
  DynamicJsonDocument doc(200);
  JsonArray arr = doc.to<JsonArray>();
  JsonObject obj = arr.createNestedObject();
  obj["variable"] = "peso";
  obj["value"] = peso;
  obj["unit"] = "kg";

  String payload;
  serializeJson(doc, payload);

  int httpResponseCode = http.POST(payload);

  if (httpResponseCode > 0) {
    Serial.print("üì§ Dados enviados! C√≥digo HTTP: ");
    Serial.println(httpResponseCode);
  } else {
    Serial.print("‚ö†Ô∏è Erro ao enviar dados: ");
    Serial.println(http.errorToString(httpResponseCode));
  }

  http.end();
}

void buscarDados(){
   HTTPClient http;
    http.begin("https://khprnw-3000.csb.app/buscarDadosTago");  // Inicia conex√£o

    int httpCode = http.GET(); // Faz requisi√ß√£o GET

    if (httpCode > 0) {
      String payload = http.getString();
      Serial.println("Resposta:");
      Serial.println(payload);

      // Parse do JSON
      StaticJsonDocument<200> doc;
      DeserializationError error = deserializeJson(doc, payload);

      if (!error) {
        float peso = doc["peso"];
        int temperatura = doc["temperatura"];
        const char* ledloja = doc["ledloja"];

        Serial.printf("Peso: %.3f\n", peso);
        Serial.printf("Temperatura: %d\n", temperatura);
        Serial.printf("LedLoja: %s\n", ledloja);

        // Aciona o LED conforme o valor
        if (strcmp(ledloja, "activate") == 0) {
          digitalWrite(LED_PIN, HIGH);
          Serial.println("LED ATIVADO");
        } else {
          digitalWrite(LED_PIN, LOW);
          Serial.println("LED DESLIGADO");
        }
      } else {
        Serial.println("Erro ao parsear JSON");
      }

    } else {
      Serial.printf("Erro na requisi√ß√£o HTTP: %d\n", httpCode);
    }

    http.end(); // Libera recursos
  }
}
